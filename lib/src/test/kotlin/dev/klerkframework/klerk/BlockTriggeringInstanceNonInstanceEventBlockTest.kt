/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package dev.klerkframework.klerk


import dev.klerkframework.klerk.command.Command
import dev.klerkframework.klerk.command.ProcessingOptions
import dev.klerkframework.klerk.command.CommandToken
import dev.klerkframework.klerk.storage.RamStorage
import kotlinx.coroutines.runBlocking
import mu.KotlinLogging
import kotlin.test.*


class BlockTriggeringInstanceNonInstanceEventBlockTest {

    private val logger = KotlinLogging.logger {}

    @Test
    fun read() {

        runBlocking {
            val bc = BookViews()
            val collections = MyCollections(bc, AuthorViews(bc.all))
            val klerk = Klerk.create(createConfig(collections, RamStorage()), KlerkSettings())
            klerk.meta.start()

            val rowlingId = createAuthorJKRowling(klerk)

            val result = klerk.handle(
                Command(ImproveAuthor, rowlingId, null),
                Context.system(),
                ProcessingOptions(CommandToken.simple())
            ).getOrHandle { fail() }

            assertTrue(result.transitionedModels.contains(rowlingId))

            val model = klerk.read(Context.system()) { get(rowlingId) }

            assertEquals(AuthorStates.Established.name, model.state)
        }
    }
}
